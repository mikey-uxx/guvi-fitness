Unit tests for service and DAO
 
 
To test the service layer and DAO (Data Access Object) for the  implementation, we will use JUnit and Mockito.
 
---
 
Setup

 
1. Add the required dependencies to your pom.xml:
 
<dependencies>
   <!-- JUnit 5 -->
   <dependency>
       <groupId>org.junit.jupiter</groupId>
       <artifactId>junit-jupiter</artifactId>
       <version>5.9.3</version>
       <scope>test</scope>
   </dependency>
   <!-- Mockito -->
   <dependency>
       <groupId>org.mockito</groupId>
       <artifactId>mockito-core</artifactId>
       <version>5.6.0</version>
       <scope>test</scope>
   </dependency>
   <!-- H2 Database for testing -->
   <dependency>
       <groupId>com.h2database</groupId>
       <artifactId>h2</artifactId>
       <version>2.1.214</version>
       <scope>test</scope>
   </dependency>
</dependencies>
 
 
 
 
---
 
1. DAO Tests

 
UserDAO.java
 
Create a UserDAO to manage database operations for users.
 
package com.fitness.dao;
 
import com.fitness.db.DBConnection;
import com.fitness.models.User;
 
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
 
public class UserDAO {
 
   public List<User> getAllUsers() throws Exception {
       List<User> users = new ArrayList<>();
       try (Connection conn = DBConnection.getConnection()) {
           String query = "SELECT * FROM users";
           PreparedStatement stmt = conn.prepareStatement(query);
           ResultSet rs = stmt.executeQuery();
           while (rs.next()) {
               users.add(new User(
                   rs.getInt("id"),
                   rs.getString("username"),
                   rs.getString("email"),
                   rs.getString("role")
               ));
           }
       }
       return users;
   }
 
   public boolean addUser(User user) throws Exception {
       try (Connection conn = DBConnection.getConnection()) {
           String query = "INSERT INTO users (username, password, email, role) VALUES (?, ?, ?, ?)";
           PreparedStatement stmt = conn.prepareStatement(query);
           stmt.setString(1, user.getUsername());
           stmt.setString(2, user.getPassword());
           stmt.setString(3, user.getEmail());
           stmt.setString(4, user.getRole());
           return stmt.executeUpdate() > 0;
       }
   }
}
 
Unit Test for UserDAO
 
package com.fitness.dao;
 
import com.fitness.models.User;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.jupiter.api.*;
 
import java.sql.Connection;
import java.sql.Statement;
import java.util.List;
 
import static org.junit.jupiter.api.Assertions.*;
 
class UserDAOTest {
 
   private static UserDAO userDAO;
   private static Connection connection;
 
   @BeforeAll
   static void setUp() throws Exception {
       // Set up H2 in-memory database
       JdbcDataSource dataSource = new JdbcDataSource();
       dataSource.setURL("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
       dataSource.setUser("sa");
       dataSource.setPassword("");
 
       connection = dataSource.getConnection();
       userDAO = new UserDAO();
 
       try (Statement stmt = connection.createStatement()) {
           stmt.execute("CREATE TABLE users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50), role VARCHAR(10))");
       }
   }
 
   @AfterEach
   void clearDatabase() throws Exception {
       try (Statement stmt = connection.createStatement()) {
           stmt.execute("DELETE FROM users");
       }
   }
 
   @AfterAll
   static void tearDown() throws Exception {
       connection.close();
   }
 
   @Test
   void testAddUser() throws Exception {
       User user = new User(0, "testuser", "testpassword", "test@example.com", "user");
       boolean isAdded = userDAO.addUser(user);
       assertTrue(isAdded, "User should be added successfully");
   }
 
   @Test
   void testGetAllUsers() throws Exception {
       // Add a user to the database
       userDAO.addUser(new User(0, "user1", "password1", "user1@example.com", "user"));
       userDAO.addUser(new User(0, "user2", "password2", "user2@example.com", "user"));
 
       // Fetch all users
       List<User> users = userDAO.getAllUsers();
 
       assertEquals(2, users.size(), "There should be 2 users in the database");
       assertEquals("user1", users.get(0).getUsername());
       assertEquals("user2", users.get(1).getUsername());
   }
}
 
 
---
 
2. Service Layer Tests

 
UserService.java
 
The service layer contains business logic, such as validation or additional processing.
 
package com.fitness.service;
 
import com.fitness.dao.UserDAO;
import com.fitness.models.User;
 
import java.util.List;
 
public class UserService {
   private final UserDAO userDAO;
 
   public UserService(UserDAO userDAO) {
       this.userDAO = userDAO;
   }
 
   public List<User> getAllUsers() throws Exception {
       return userDAO.getAllUsers();
   }
 
   public boolean registerUser(User user) throws Exception {
       if (user.getUsername().isEmpty() || user.getPassword().isEmpty()) {
           throw new IllegalArgumentException("Username or password cannot be empty");
       }
       return userDAO.addUser(user);
   }
}
 
Unit Test for UserService
 
package com.fitness.service;
 
import com.fitness.dao.UserDAO;
import com.fitness.models.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
 
import java.util.Arrays;
import java.util.List;
 
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
 
class UserServiceTest {
 
   private UserService userService;
   private UserDAO userDAO;
 
   @BeforeEach
   void setUp() {
       userDAO = mock(UserDAO.class); // Mock UserDAO
       userService = new UserService(userDAO);
   }
 
   @Test
   void testGetAllUsers() throws Exception {
       // Mock the behavior of UserDAO
       when(userDAO.getAllUsers()).thenReturn(Arrays.asList(
           new User(1, "user1", "user1@example.com", "user"),
           new User(2, "user2", "user2@example.com", "user")
       ));
 
       // Call the service method
       List<User> users = userService.getAllUsers();
 
       // Verify and assert
       verify(userDAO, times(1)).getAllUsers();
       assertEquals(2, users.size(), "The service should return 2 users");
       assertEquals("user1", users.get(0).getUsername());
   }
 
   @Test
   void testRegisterUser_ValidData() throws Exception {
       User user = new User(0, "testuser", "test@example.com", "user");
 
       // Mock the behavior of UserDAO
       when(userDAO.addUser(user)).thenReturn(true);
 
       // Call the service method
       boolean isRegistered = userService.registerUser(user);
 
       // Verify and assert
       verify(userDAO, times(1)).addUser(user);
       assertTrue(isRegistered, "User should be registered successfully");
   }
 
   @Test
   void testRegisterUser_InvalidData() {
       User user = new User(0, "", "test@example.com", "user");
 
       // Call the service method and expect an exception
       Exception exception = assertThrows(IllegalArgumentException.class, () -> userService.registerUser(user));
       assertEquals("Username or password cannot be empty", exception.getMessage());
   }
}
 
 
---
 
Test Execution
 
1. Run the tests using your IDE or Maven:
 
mvn test
 
 
 
 
 
---
 
 
 


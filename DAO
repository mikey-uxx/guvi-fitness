User DAO.java

package dao;
 
import java.sql.*;
import model.User;
 
public class UserDAO {
   private static final String DB_URL = "jdbc:mysql://localhost:3306/fitness_app";
   private static final String DB_USER = "root";
   private static final String DB_PASSWORD = "your_password";
 
   // Add a new user
   public boolean addUser(User user) {
       String query = "INSERT INTO Users (username, email, password, age, gender, height, weight) VALUES
 
 
 
 
String query = "INSERT INTO Users (username, email, password, age, gender, height, weight) VALUES (?, ?, ?, ?, ?, ?, ?)";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setString(1, user.getUsername());
           statement.setString(2, user.getEmail());
           statement.setString(3, user.getPassword());
           statement.setInt(4, user.getAge());
           statement.setString(5, user.getGender());
           statement.setDouble(6, user.getHeight());
           statement.setDouble(7, user.getWeight());
 
           return statement.executeUpdate() > 0;
       } catch (SQLException e) {
           e.printStackTrace();
           return false;
       }
   }
 
   // Retrieve a user by username or email
   public User getUser(String usernameOrEmail) {
       String query = "SELECT * FROM Users WHERE username = ? OR email = ?";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setString(1, usernameOrEmail);
           statement.setString(2, usernameOrEmail);
 
           ResultSet resultSet = statement.executeQuery();
           if (resultSet.next()) {
               return new User(
                       resultSet.getInt("id"),
                       resultSet.getString("username"),
                       resultSet.getString("email"),
                       resultSet.getString("password"),
                       resultSet.getInt("age"),
                       resultSet.getString("gender"),
                       resultSet.getDouble("height"),
                       resultSet.getDouble("weight")
               );
           }
       } catch (SQLException e) {
           e.printStackTrace();
       }
       return null;
   }
 
   // Update a user's details
   public boolean updateUser(User user) {
       String query = "UPDATE Users SET username = ?, email = ?, password = ?, age = ?, gender = ?, height = ?, weight = ? WHERE id = ?";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setString(1, user.getUsername());
           statement.setString(2, user.getEmail());
           statement.setString(3, user.getPassword());
           statement.setInt(4, user.getAge());
           statement.setString(5, user.getGender());
           statement.setDouble(6, user.getHeight());
           statement.setDouble(7, user.getWeight());
           statement.setInt(8, user.getId());
 
           return statement.executeUpdate() > 0;
       } catch (SQLException e) {
           e.printStackTrace();
           return false;
       }
   }
 
   // Delete a user
   public boolean deleteUser(int userId) {
       String query = "DELETE FROM Users WHERE id = ?";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setInt(1, userId);
           return statement.executeUpdate() > 0;
       } catch (SQLException e) {
           e.printStackTrace();
           return false;
       }
   }
}
 
 
 
 
 
 
Workout DAO.java

package dao;
 
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Workout;
 
public class WorkoutDAO {
   private static final String DB_URL = "jdbc:mysql://localhost:3306/fitness_app";
   private static final String DB_USER = "root";
   private static final String DB_PASSWORD = "your_password";
 
   // Add a new workout
   public boolean addWorkout(Workout workout) {
       String query = "INSERT INTO Workouts (user_id, exercise_name, duration, calories_burned) VALUES (?, ?, ?, ?)";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setInt(1, workout.getUserId());
           statement.setString(2, workout.getExerciseName());
           statement.setInt(3, workout.getDuration());
           statement.setDouble(4, workout.getCaloriesBurned());
 
           return statement.executeUpdate() > 0;
       } catch (SQLException e) {
           e.printStackTrace();
           return false;
       }
   }
 
   // Retrieve all workouts for a user
   public List<Workout> getWorkoutsByUserId(int userId) {
       List<Workout> workouts = new ArrayList<>();
       String query = "SELECT * FROM Workouts WHERE user_id = ?";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setInt(1, userId);
 
           ResultSet resultSet = statement.executeQuery();
           while (resultSet.next()) {
               workouts.add(new Workout(
                       resultSet.getInt("id"),
                       resultSet.getInt("user_id"),
                       resultSet.getString("exercise_name"),
                       resultSet.getInt("duration"),
                       resultSet.getDouble("calories_burned")
               ));
           }
       } catch (SQLException e) {
           e.printStackTrace();
       }
       return workouts;
   }
 
   // Delete a workout by ID
   public boolean deleteWorkout(int workoutId) {
       String query = "DELETE FROM Workouts WHERE id = ?";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setInt(1, workoutId);
           return statement.executeUpdate() > 0;
       } catch (SQLException e) {
           e.printStackTrace();
           return false;
       }
   }
}
 
 
NUTRITION DAO.java

 
package dao;
 
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Nutrition;
 
public class NutritionDAO {
   private static final String DB_URL = "jdbc:mysql://localhost:3306/fitness_app";
   private static final String DB_USER = "root";
   private static final String DB_PASSWORD = "your_password";
 
   // Add a new nutrition record
   public boolean addNutrition(Nutrition nutrition) {
       String query = "INSERT INTO Nutrition (user_id, food_item, calories, date) VALUES (?, ?, ?, ?)";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setInt(1, nutrition.getUserId());
           statement.setString(2, nutrition.getFoodItem());
           statement.setInt(3, nutrition.getCalories());
           statement.setDate(4, Date.valueOf(nutrition.getDate()));
 
           return statement.executeUpdate() > 0;
       } catch (SQLException e) {
           e.printStackTrace();
           return false;
       }
   }
 
   // Retrieve all nutrition records for a user
   public List<Nutrition> getNutritionByUserId(int userId) {
       List<Nutrition> nutritionList = new ArrayList<>();
       String query = "SELECT * FROM Nutrition WHERE user_id = ?";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setInt(1, userId);
 
           ResultSet resultSet = statement.executeQuery();
           while (resultSet.next()) {
               nutritionList.add(new Nutrition(
                       resultSet.getInt("id"),
                       resultSet.getInt("user_id"),
                       resultSet.getString("food_item"),
                       resultSet.getInt("calories"),
                       resultSet.getDate("date").toLocalDate()
               ));
           }
       } catch (SQLException e) {
           e.printStackTrace();
       }
       return nutritionList;
   }
}
 
 
 
GOALS DAO.java

package dao;
 
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Goal;
 
public class GoalDAO {
   private static final String DB_URL = "jdbc:mysql://localhost:3306/fitness_app";
   private static final String DB_USER = "root";
   private static final String DB_PASSWORD = "your_password";
 
   // Add a new goal
   public boolean addGoal(Goal goal) {
       String query = "INSERT INTO Goals (user_id, goal_type, target_date, target_value) VALUES (?, ?, ?, ?)";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setInt(1, goal.getUserId());
           statement.setString(2, goal.getGoalType());
           statement.setDate(3, Date.valueOf(goal.getTargetDate()));
           statement.setDouble(4, goal.getTargetValue());
 
           return statement.executeUpdate() > 0;
       } catch (SQLException e) {
           e.printStackTrace();
           return false;
       }
   }
 
   // Retrieve all goals for a user
   public List<Goal> getGoalsByUserId(int userId) {
       List<Goal> goals = new ArrayList<>();
       String query = "SELECT * FROM Goals WHERE user_id = ?";
       try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            PreparedStatement statement = connection.prepareStatement(query)) {
 
           statement.setInt(1, userId);
 
           ResultSet resultSet = statement.executeQuery();
           while (resultSet.next()) {
               goals.add(new Goal(
 
 
 
 
